{"version":3,"sources":["logo.svg","Algorithms/mergeSort.jsx","Algorithms/heapSort.jsx","Algorithms/quickSort.jsx","Sort_Visualizer/SortingVisualizer.jsx","Algorithms/bubble.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","mergeSort","array","animations","length","auxiliaryArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","k","i","j","push","doMerge","heapify","n","largest","l","r","tmp","heapSort","heapSortHelper","quickSort","quickSortHelper","low","high","pi","pivot","partition","SortingVisualizer","props","state","NUMBER_OF_ARRAY_BARS","this","resetArray","min","max","random","setState","mergeSortAlgo","arrayBars","document","getElementsByClassName","barOneIdx","barTwoIdx","barOneStyle","style","barTwoStyle","color","setTimeout","backgroundColor","newHeight","height","heapSortAlgo","quickSortAlgo","bubbleSortHelper","bubbleSortAlgo","e","target","value","className","Button","onClick","bubbleSort","type","name","onChange","handleChange","map","idx","key","width","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.9dacf2d5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","\r\n\r\nexport function mergeSort(array) {\r\n    const animations = [];\r\n    if (array.length <= 1) return array;\r\n    const auxiliaryArray = array.slice();\r\n    mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\r\n    return animations;\r\n}\r\n\r\nfunction mergeSortHelper(\r\n    mainArray,\r\n    startIdx,\r\n    endIdx,\r\n    auxiliaryArray,\r\n    animations,\r\n) {\r\n    if (startIdx === endIdx) return;\r\n    const middleIdx = Math.floor((startIdx + endIdx) / 2);\r\n    mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\r\n    mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\r\n    doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\r\n}\r\n\r\nfunction doMerge(\r\n    mainArray,\r\n    startIdx,\r\n    middleIdx,\r\n    endIdx,\r\n    auxiliaryArray,\r\n    animations,\r\n) {\r\n    let k = startIdx;\r\n    let i = startIdx;\r\n    let j = middleIdx + 1;\r\n    while (i <= middleIdx && j <= endIdx) {\r\n        // These are the values that we're comparing; we push them once\r\n        // to change their color.\r\n        animations.push([i, j]);\r\n        // These are the values that we're comparing; we push them a second\r\n        // time to revert their color.\r\n        animations.push([i, j]);\r\n        if (auxiliaryArray[i] <= auxiliaryArray[j]) {\r\n            // We overwrite the value at index k in the original array with the\r\n            // value at index i in the auxiliary array.\r\n            animations.push([k, auxiliaryArray[i]]);\r\n            mainArray[k++] = auxiliaryArray[i++];\r\n        } else {\r\n            // We overwrite the value at index k in the original array with the\r\n            // value at index j in the auxiliary array.\r\n            animations.push([k, auxiliaryArray[j]]);\r\n            mainArray[k++] = auxiliaryArray[j++];\r\n        }\r\n    }\r\n    while (i <= middleIdx) {\r\n        // These are the values that we're comparing; we push them once\r\n        // to change their color.\r\n        animations.push([i, i]);\r\n        // These are the values that we're comparing; we push them a second\r\n        // time to revert their color.\r\n        animations.push([i, i]);\r\n        // We overwrite the value at index k in the original array with the\r\n        // value at index i in the auxiliary array.\r\n        animations.push([k, auxiliaryArray[i]]);\r\n        mainArray[k++] = auxiliaryArray[i++];\r\n    }\r\n    while (j <= endIdx) {\r\n        // These are the values that we're comparing; we push them once\r\n        // to change their color.\r\n        animations.push([j, j]);\r\n        // These are the values that we're comparing; we push them a second\r\n        // time to revert their color.\r\n        animations.push([j, j]);\r\n        // We overwrite the value at index k in the original array with the\r\n        // value at index j in the auxiliary array.\r\n        animations.push([k, auxiliaryArray[j]]);\r\n        mainArray[k++] = auxiliaryArray[j++];\r\n    }\r\n}","function heapify(auxiliaryArray, n, i, animations) {\r\n    let largest = i;\r\n    let l = 2 * i + 1;\r\n    let r = 2 * i + 2;\r\n\r\n    if (l < n && auxiliaryArray[l] > auxiliaryArray[largest]) {\r\n        largest = l;\r\n    }\r\n    if (r < n && auxiliaryArray[r] > auxiliaryArray[largest]) {\r\n        largest = r;\r\n    }\r\n\r\n    if (largest !== i) {\r\n        let tmp = auxiliaryArray[i];\r\n        auxiliaryArray[i] = auxiliaryArray[largest];\r\n        auxiliaryArray[largest] = tmp;\r\n\r\n        // These are the values that we're comparing; we push them once\r\n        // to change their color.\r\n        animations.push([i, largest]);\r\n        // These are the values that we're comparing; we push them a second\r\n        // time to revert their color.\r\n        animations.push([i, largest]);\r\n        // We overwrite the value at index i and largest by swapping them in the auxiliaryArrayay with the\r\n        animations.push([i, auxiliaryArray[i]]);\r\n        animations.push([largest, auxiliaryArray[largest]]);\r\n\r\n        heapify(auxiliaryArray, n, largest, animations);\r\n    }\r\n}\r\n\r\n\r\nfunction heapSortHelper(n, auxiliaryArray, animations) {\r\n    for (let i = n; i >= 0; --i) {\r\n        heapify(auxiliaryArray, n, i, animations);\r\n    }\r\n\r\n    for (let i = n - 1; i > 0; --i) {\r\n        let tmp = auxiliaryArray[0];\r\n        auxiliaryArray[0] = auxiliaryArray[i];\r\n        auxiliaryArray[i] = tmp;\r\n\r\n        // These are the values that we're comparing; we push them once\r\n        // to change their color.\r\n        animations.push([0, i]);\r\n        // These are the values that we're comparing; we push them a second\r\n        // time to revert their color.\r\n        animations.push([0, i]);\r\n        // We overwrite the value at index i and 0 by swapping them in the auxiliaryArray with the\r\n        //respective swapped values\r\n        animations.push([0, auxiliaryArray[0]]);\r\n        animations.push([i, auxiliaryArray[i]]);\r\n\r\n        heapify(auxiliaryArray, i, 0, animations);\r\n    }\r\n}\r\nexport function heapSort(array) {\r\n    const animations = [];\r\n    if (array.length <= 1) return array;\r\n    const auxiliaryArray = array.slice();\r\n    heapSortHelper(auxiliaryArray.length, auxiliaryArray, animations);\r\n    return animations;\r\n}\r\n\r\n","function partition(auxiliaryArray, low, high, animations) {\r\n    let pivot = auxiliaryArray[high];\r\n    let i = low - 1;\r\n\r\n    for (let j = low; j < high; j++) {\r\n        if (auxiliaryArray[j] < pivot) {\r\n            i++;\r\n            let tmp = auxiliaryArray[i];\r\n            auxiliaryArray[i] = auxiliaryArray[j];\r\n            auxiliaryArray[j] = tmp;\r\n\r\n            // These are the values that we're comparing; we push them once\r\n            // to change their color.\r\n            animations.push([i, j]);\r\n            // These are the values that we're comparing; we push them a second\r\n            // time to revert their color.\r\n            animations.push([i, j]);\r\n            // We overwrite the value at index i and 0 by swapping them in the auxiliaryArray with the\r\n            //respective swapped values\r\n            animations.push([i, auxiliaryArray[i]]);\r\n            animations.push([j, auxiliaryArray[j]]);\r\n        }\r\n    }\r\n    let tmp = auxiliaryArray[i + 1];\r\n    auxiliaryArray[i + 1] = auxiliaryArray[high];\r\n    auxiliaryArray[high] = tmp;\r\n\r\n    // These are the values that we're comparing; we push them once\r\n    // to change their color.\r\n    animations.push([i + 1, high]);\r\n    // These are the values that we're comparing; we push them a second\r\n    // time to revert their color.\r\n    animations.push([i + 1, high]);\r\n    // We overwrite the value at index i and 0 by swapping them in the auxiliaryArray with the\r\n    //respective swapped values\r\n    animations.push([i + 1, auxiliaryArray[i + 1]]);\r\n    animations.push([high, auxiliaryArray[high]]);\r\n\r\n    return i + 1;\r\n}\r\n\r\nfunction quickSortHelper(auxiliaryArray, low, high, animations) {\r\n    if (low < high) {\r\n        let pi = partition(auxiliaryArray, low, high, animations);\r\n\r\n        quickSortHelper(auxiliaryArray, low, pi - 1, animations);\r\n        quickSortHelper(auxiliaryArray, pi + 1, high, animations);\r\n    }\r\n}\r\nexport function quickSort(array) {\r\n    const animations = [];\r\n    if (array.length <= 1) return array;\r\n    const auxiliaryArray = array.slice();\r\n    quickSortHelper(auxiliaryArray, 0, auxiliaryArray.length - 1, animations);\r\n    return animations;\r\n}","import React, { Component } from 'react'\r\nimport './SortingVisualizer.css';\r\nimport { Button } from 'reactstrap';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { mergeSort as mergeSortAlgo } from '../Algorithms/mergeSort.jsx';\r\nimport { heapSort as heapSortAlgo } from '../Algorithms/heapSort.jsx';\r\nimport { bubbleSort as bubbleSortAlgo } from '../Algorithms/bubble.jsx';\r\nimport { quickSort as quickSortAlgo } from '../Algorithms/quickSort.jsx';\r\n\r\n// Change this value for the speed of the animations.\r\nconst ANIMATION_SPEED_MS = 310;\r\n\r\n\r\n\r\n// This is the main color of the array bars.\r\nconst PRIMARY_COLOR = 'turquoise';\r\n\r\n// This is the color of array bars that are being compared throughout the animations.\r\nconst SECONDARY_COLOR = 'red';\r\n\r\nexport class SortingVisualizer extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            array: [],\r\n            NUMBER_OF_ARRAY_BARS: 310\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        this.resetArray();\r\n    }\r\n\r\n    resetArray() {\r\n        const array = [];\r\n        for (let i = 0; i < this.state.NUMBER_OF_ARRAY_BARS; ++i) {\r\n            array.push(genrandom(3, 500));\r\n            //pushing a random number\r\n\r\n        }\r\n        this.setState({ array });\r\n    }\r\n\r\n\r\n\r\n    mergeSort() {\r\n        const animations = mergeSortAlgo(this.state.array);\r\n        for (let i = 0; i < animations.length; i++) {\r\n            const arrayBars = document.getElementsByClassName('array-bar');\r\n            const isColorChange = i % 3 !== 2;\r\n            if (isColorChange) {\r\n                const [barOneIdx, barTwoIdx] = animations[i];\r\n                const barOneStyle = arrayBars[barOneIdx].style;\r\n                const barTwoStyle = arrayBars[barTwoIdx].style;\r\n                const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n                setTimeout(() => {\r\n                    barOneStyle.backgroundColor = color;\r\n                    barTwoStyle.backgroundColor = color;\r\n                }, i * ANIMATION_SPEED_MS / this.state.NUMBER_OF_ARRAY_BARS);\r\n            } else {\r\n                setTimeout(() => {\r\n                    const [barOneIdx, newHeight] = animations[i];\r\n                    const barOneStyle = arrayBars[barOneIdx].style;\r\n                    barOneStyle.height = `${newHeight}px`;\r\n                }, i * ANIMATION_SPEED_MS / this.state.NUMBER_OF_ARRAY_BARS);\r\n            }\r\n        }\r\n    }\r\n\r\n    heapSort() {\r\n        const animations = heapSortAlgo(this.state.array);\r\n        for (let i = 0; i < animations.length; i++) {\r\n            const arrayBars = document.getElementsByClassName('array-bar');\r\n            const isColorChange = i % 4 < 2;\r\n            if (isColorChange) {\r\n                const [barOneIdx, barTwoIdx] = animations[i];\r\n                const barOneStyle = arrayBars[barOneIdx].style;\r\n                const barTwoStyle = arrayBars[barTwoIdx].style;\r\n                const color = i % 4 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n                setTimeout(() => {\r\n                    barOneStyle.backgroundColor = color;\r\n                    barTwoStyle.backgroundColor = color;\r\n                }, i * ANIMATION_SPEED_MS / this.state.NUMBER_OF_ARRAY_BARS);\r\n            } else {\r\n                setTimeout(() => {\r\n                    const [barOneIdx, newHeight] = animations[i];\r\n                    const barOneStyle = arrayBars[barOneIdx].style;\r\n                    barOneStyle.height = `${newHeight}px`;\r\n                }, i * ANIMATION_SPEED_MS / this.state.NUMBER_OF_ARRAY_BARS);\r\n            }\r\n        }\r\n    }\r\n\r\n    quickSort() {\r\n        const animations = quickSortAlgo(this.state.array);\r\n        for (let i = 0; i < animations.length; i++) {\r\n            const arrayBars = document.getElementsByClassName('array-bar');\r\n            const isColorChange = i % 4 < 2;\r\n            if (isColorChange) {\r\n                const [barOneIdx, barTwoIdx] = animations[i];\r\n                const barOneStyle = arrayBars[barOneIdx].style;\r\n                const barTwoStyle = arrayBars[barTwoIdx].style;\r\n                const color = i % 4 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n                setTimeout(() => {\r\n                    barOneStyle.backgroundColor = color;\r\n                    barTwoStyle.backgroundColor = color;\r\n                }, i * ANIMATION_SPEED_MS / this.state.NUMBER_OF_ARRAY_BARS);\r\n            } else {\r\n                setTimeout(() => {\r\n                    const [barOneIdx, newHeight] = animations[i];\r\n                    const barOneStyle = arrayBars[barOneIdx].style;\r\n                    barOneStyle.height = `${newHeight}px`;\r\n                }, i * ANIMATION_SPEED_MS / this.state.NUMBER_OF_ARRAY_BARS);\r\n            }\r\n        }\r\n    }\r\n\r\n    bubbleSort() {\r\n        const animations = bubbleSortAlgo(this.state.array);\r\n        for (let i = 0; i < animations.length; i++) {\r\n            const arrayBars = document.getElementsByClassName('array-bar');\r\n            const isColorChange = i % 4 < 2;\r\n            if (isColorChange) {\r\n                const [barOneIdx, barTwoIdx] = animations[i];\r\n                const barOneStyle = arrayBars[barOneIdx].style;\r\n                const barTwoStyle = arrayBars[barTwoIdx].style;\r\n                const color = i % 4 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n                setTimeout(() => {\r\n                    barOneStyle.backgroundColor = color;\r\n                    barTwoStyle.backgroundColor = color;\r\n                }, i * ANIMATION_SPEED_MS / this.state.NUMBER_OF_ARRAY_BARS / 2);\r\n            } else {\r\n                setTimeout(() => {\r\n                    const [barOneIdx, newHeight] = animations[i];\r\n                    const barOneStyle = arrayBars[barOneIdx].style;\r\n                    barOneStyle.height = `${newHeight}px`;\r\n                }, i * ANIMATION_SPEED_MS / this.state.NUMBER_OF_ARRAY_BARS / 2);\r\n            }\r\n        }\r\n    }\r\n\r\n    handleChange(e) {\r\n        this.setState({ NUMBER_OF_ARRAY_BARS: e.target.value });\r\n        this.resetArray();\r\n    }\r\n\r\n    render() {\r\n\r\n        const { array } = this.state;\r\n        return (\r\n            <>\r\n                <div className=\"breadcrumb\">\r\n                    <Button className=\"btn btn-lg btn-danger\" onClick={() => this.resetArray()}>Generate New Array</Button>\r\n                    <div className=\"btn-group\">\r\n                        <Button className=\"btn btn-lg btn-secondary\" onClick={() => this.mergeSort()}>Merge Sort</Button>\r\n                        <Button className=\"btn btn-lg btn-success\" onClick={() => this.heapSort()}>Heap Sort</Button>\r\n                        <Button className=\"btn btn-lg btn-info\" onClick={() => this.quickSort()}>Quick Sort</Button>\r\n                        <Button className=\"btn btn-lg btn-dark\" onClick={() => this.bubbleSort()}>Bubble Sort</Button>\r\n                    </div>\r\n                    <div className=\"slidecontainer\">\r\n                        <p>Change Array size and speed</p>\r\n                        <input type=\"range\" min=\"10\" max=\"310\" value={this.state.NUMBER_OF_ARRAY_BARS} name='val_blur' className=\"slider\" onChange={(e) => { this.handleChange(e) }} />\r\n                    </div>\r\n                </div>\r\n                <div className=\"array-conatiner\">\r\n                    {array.map((value, idx) => (\r\n                        <div\r\n                            className=\"array-bar\"\r\n                            key={idx}\r\n                            style={{\r\n                                height: `${value}px`, width: `${620 / this.state.NUMBER_OF_ARRAY_BARS}px`\r\n                            }}>\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nfunction genrandom(min, max) {\r\n    return Math.floor(Math.random() * (max - min + 1) + min);\r\n}\r\n\r\nexport default SortingVisualizer\r\n","function bubbleSortHelper(n, auxiliaryArray, animations) {\r\n    for (let i = 0; i < n - 1; ++i) {\r\n        for (let j = 0; j < n - i; ++j) {\r\n            if (auxiliaryArray[j] > auxiliaryArray[j + 1]) {\r\n                let tmp = auxiliaryArray[j];\r\n                auxiliaryArray[j] = auxiliaryArray[j + 1];\r\n                auxiliaryArray[j + 1] = tmp;\r\n\r\n                // These are the values that we're comparing; we push them once\r\n                // to change their color.\r\n                animations.push([j, j + 1]);\r\n                // These are the values that we're comparing; we push them a second\r\n                // time to revert their color.\r\n                animations.push([j, j + 1]);\r\n                // We overwrite the value at index j and j+1 by swapping them in the auxiliaryArray with the\r\n                //respective swapped values\r\n                animations.push([j, auxiliaryArray[j]]);\r\n                animations.push([j + 1, auxiliaryArray[j + 1]]);\r\n\r\n            }\r\n        }\r\n    }\r\n}\r\nexport function bubbleSort(array) {\r\n    const animations = [];\r\n    if (array.length <= 1) return array;\r\n    const auxiliaryArray = array.slice();\r\n    bubbleSortHelper(auxiliaryArray.length, auxiliaryArray, animations);\r\n    return animations;\r\n}\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport SortingVisualizer from './Sort_Visualizer/SortingVisualizer';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SortingVisualizer></SortingVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}